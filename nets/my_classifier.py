# coding=utf-8
"""
Python module for softmax binary classifier neural network
"""

import torch.nn as nn
import torch

def init_weights(net):
    """
    initialize the weights of a network
    :param net:
    :return:
    """

    # init parameters
    def init_module(m):
        if type(m) == nn.Linear:
            nn.init.xavier_normal(m.weight.data)
            nn.init.constant(m.bias.data, 0)

    net.apply(init_module)

    return net

class MyClassifier(nn.Module):

    def __init__(self, input_size, hidden_1_size, hidden_2_size, hidden_3_size):
        super().__init__()

        self.mal_score = nn.Sequential(
            nn.Linear(input_size, hidden_1_size),
            nn.ReLU(),
            nn.Linear(hidden_1_size, hidden_2_size),
            nn.ReLU(),
            nn.Linear(hidden_2_size, hidden_3_size),
            nn.ReLU(),
            nn.Linear(hidden_3_size, 1),
            nn.Sigmoid())

    def forward(self, x):
        mal = self.mal_score(x)
        ben = 1-mal
        return nn.LogSoftmax(dim=1)(torch.cat([ben, mal], dim=1))


def build_my_classifier(input_size, hidden_1_size, hidden_2_size, hidden_3_size):
    """
    Constructs a neural net binary classifer
    :param input_size:
    :param hidden_1_size:
    :param hidden_2_size:
    :param hidden_3_size:
    :param num_labels:
    :return:
    """
    net = MyClassifier(input_size, hidden_1_size, hidden_2_size, hidden_3_size)

    return init_weights(net)